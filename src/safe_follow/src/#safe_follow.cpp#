#include "ros/ros.h"
#include "std_msgs/Int8.h"
#include "geometry_msgs/Point32.h"
#include "sensor_msgs/PointCloud.h"
#include <vector>
#include <iostream>
#include "sensor_msgs/LaserScan.h"
#include "laser_geometry/laser_geometry.h"
#include <stdlib.h>

laser_geometry::LaserProjection projector2_;
using namespace std;

class cluster{
public:
    vector<geometry_msgs::Point32> points;
};

ros::Publisher emergency_stop;

void segment_clusters(vector<geometry_msgs::Point32> data,vector<cluster>& data_clusters)
{
	int j;
	float x_threshold = 0.05;
	float y_threshold = 0.05;
	cluster new_cluster;
	for (int i=0;i<data.size();i++)
	{
		if (i==0)
		{
			data_clusters.push_back(new_cluster);
			j = 0;
		}
		else
		{
			if ((abs(data[i].x-data[i-1].x) < x_threshold) && (abs(data[i].y-data[i-1].y) < y_threshold));
			else
			{
				data_clusters.push_back(new_cluster);
				j++;
			}
		}
		data_clusters[j].points.push_back(data[i]);
	}
}

void safeCallback(const sensor_msgs::LaserScan::ConstPtr& msg)
{
	sensor_msgs::PointCloud in_scan;
	projector2_.projectLaser(*msg, in_scan);
	float safe_x = 0.50;
	float error_x = 0.02;
	float safe_y = 0.25;
	bool obstacle = false;
	vector<geometry_msgs::Point32> unsafe_points;
	geometry_msgs::Point32 point;
	for (int i=0;i<in_scan.points.size();i++)
	  {
		point.x = in_scan.points[i].x;
		point.y = in_scan.points[i].y;
		point.z = 0;
		if ((point.x < safe_x) && (point.x > error_x) && (abs(point.y) < safe_y))
			{
				unsafe_points.push_back(point);
			}
	  }
	vector<cluster> data_clusters;
	segment_clusters(unsafe_points,data_clusters);
	std_msgs::Int8 obstacle_check;
	for (int i=0;i<data_clusters.size();i++)
	 {
		if (data_clusters[i].points.size() > 3)
			{
				cout << " obstacle detected ";
				obstacle = true;
			}
	 }
	if (obstacle == true) obstacle_check.data = 1;
	else obstacle_check.data = 0;
	emergency_stop.publish(obstacle_check);
}

int main(int argc,char **argv)
{
	 ros::init(argc,argv,"safe_follow");
	 ros::NodeHandle nh;
	 ros::Subscriber safe_sub = nh.subscribe("/scan",2,safeCallback); // subscribe to urg node's topic
	 emergency_stop = nh.advertise<std_msgs::Int8>("/emergency_stop_signal",1);
	 ros::spin();
	 ros::waitForShutdown();
}
